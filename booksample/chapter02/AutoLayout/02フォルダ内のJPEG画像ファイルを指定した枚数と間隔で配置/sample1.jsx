(function(){	if (app.documents.length < 1) {		alert("あらかじめドキュメントを開いてから実行してください");		return;	}	var extType = "*.jpg";	// JPEGファイルだけを対象にする	var dx = prompt("横幅をmm単位で指定してください", 50);	if (dx == null) return;	// キャンセルされたら以後の処理を行わない	var dy = prompt("縦幅をmm単位で指定してください", 30);	if (dy == null) return;	// キャンセルされたら以後の処理を行わない	var diff = prompt("画像との間隔をmm単位で指定してください",8);	if (diff == null) return;	// キャンセルされたら以後の処理を行わない	dx = parseFloat(dx);	// 文字列から数値に変換する	dy = parseFloat(dy);	// 文字列から数値に変換する	diff = parseFloat(diff);	// 文字列から数値に変換する	var pageWidth = app.activeDocument.documentPreferences.pageWidth;	// ページの横幅	var pageHeight = app.activeDocument.documentPreferences.pageHeight;	// ページの縦幅	var filenameX = 0;	// 画像の左枠からのオフセット(mm)	var filenameY = 0.5;	// 画像の下枠からのオフセット(mm)	var filenameWidth = dx;	var filenameHeight = 6;	// 画像との間隔を6mmにする	var unit = "mm";	var folderObj = Folder.selectDialog("JPEG画像のあるフォルダを選択してください");	if (!folderObj) return;	// キャンセルボタンが押された時は処理しない	var pageNo = parseInt(prompt("割り付けるページ数を指定してください",1)) - 1;	if ((pageNo < 0) || (pageNo > app.activeDocument.pages.length-1)){		alert("割り付けるページは存在しません");		return;	}	var autoFlag = confirm("自動的にページを追加しますか？");	// trueなら自動追加	var fileList = folderObj.getFiles(extType);	if (fileList.length < 1) {		alert("割り付ける画像がありません");		return;	}	rulerSetting = app.activeDocument.viewPreferences.rulerOrigin;	// 現在の定規の開始位置	app.activeDocument.viewPreferences.rulerOrigin = RulerOrigin.pageOrigin;	// 定規の開始位置を「ページ」にする	var marginLeft = app.activeDocument.pages[pageNo].marginPreferences.left;	// 左の余白	var marginTop = app.activeDocument.pages[pageNo].marginPreferences.top;	// 上の余白	var marginRight = app.activeDocument.pages[pageNo].marginPreferences.right;	// 右の余白	var marginBottom = app.activeDocument.pages[pageNo].marginPreferences.bottom;	// 下の余白	var pageObj = app.activeDocument.pages[pageNo];	if (pageObj.side == PageSideOptions.leftHand)	{	// 左ページの場合のみ処理		var temp = marginLeft;		marginLeft = marginRight;		marginRight = temp;	}	var imageX = startX = marginLeft;	// 左からの開始位置を微調整したい時はここに値を加算または減算してください	var imageY = startY = marginTop;	// 上からの開始位置を微調整したい時はここに値を加算または減算してください	for (var i=0; i<fileList.length; i++){		var textBaseY = imageY+dy+filenameY;		var aTop = textBaseY+unit;	// テキストフレームの上の位置		var aRight = (imageX+filenameX+filenameWidth)+unit;	// テキストフレームの右端の位置		var aBottom = (textBaseY+filenameHeight)+unit;	// テキストフレームの下の位置		var aLeft = (imageX+filenameX)+unit;	// テキストフレームの左端の位置		var textBaseY = imageY+dy+filenameY;		var filename = fileList[i].name;		writeFilename(pageObj, filename, textBaseY, aTop, aRight, aBottom, aLeft);	// ファイル名を追加		imgObj = pageObj.rectangles.add();		imgObj.move(pageObj);	// フレームを指定したページへ移動		imgObj.move(undefined, [1, 0]);	// 異なるページに移動する誤作動がないようにX座標を移動		imgObj.visibleBounds = [imageY+unit, (imageX+dx)+unit, (imageY+dy)+unit, imageX+unit];		imgObj.strokeColor = app.activeDocument.swatches.item("Black");		imgObj.strokeWeight = 0.1;	// 線を設定する		imgObj.place(fileList[i]);		imgObj.fit(FitOptions.proportionally);		imgObj.fit(FitOptions.centerContent);		imageX = imageX + dx + diff;		if ((imageX + dx) > (pageWidth - marginRight)){			imageX = startX;			imageY = imageY + dy + diff;			if ((imageY + dy) > (pageHeight - marginBottom)) {				if (autoFlag == false) {					app.activeDocument.viewPreferences.rulerOrigin = rulerSetting;	// 定規の開始位置を元に戻す					return;	// 自動でページ追加しない場合、ページの高さを超えたら、これ以上はレイアウトしない				}				imageY = startY;				pageNo = pageNo + 1;	// 次のページに移動			if (pageNo >= app.activeDocument.pages.length) {					pageObj = app.activeDocument.pages.add();	// 最終ページを越えた場合は新たにページを自動で追加				}else{					pageObj = app.activeDocument.pages[pageNo];	// ページがある場合は、そのページ上にレイアウト				}				marginLeft = app.activeDocument.pages[pageNo].marginPreferences.left;	// 左の余白				marginTop = app.activeDocument.pages[pageNo].marginPreferences.top;	// 上の余白				marginRight = app.activeDocument.pages[pageNo].marginPreferences.right;	// 右の余白				marginBottom = app.activeDocument.pages[pageNo].marginPreferences.bottom;	// 下の余白				if (pageObj.side == PageSideOptions.leftHand)	{	// 左ページの場合のみ処理					var temp = marginLeft;					marginLeft = marginRight;					marginRight = temp;				}				imageX = startX = marginLeft;	// マージンを考慮した新たな座標値を設定			}		}	}	app.activeDocument.viewPreferences.rulerOrigin = rulerSetting;	// 定規の開始位置を元に戻す})();// テキストフレームを作成しファイル名を表示する処理function writeFilename(pageObj, text, textBaseY, aTop, aRight, aBottom, aLeft){		var dakuten = "%E3%82%99";	// ★Mac版InDesign CS2用 (WindowsやCS3では不要)		var handakuten = "%E3%82%9A";	// ★Mac版InDesign CS2用 (WindowsやCS3では不要)		text = convertKana(text,dakuten,1);	// ★Mac版InDesign CS2用 (WindowsやCS3では不要)		text = convertKana(text,handakuten,2);	// ★Mac版InDesign CS2用 (WindowsやCS3では不要)		text = File.decode(text);	// ★Mac版InDesign CS2用 (WindowsやCS3では不要)		var tfObj = pageObj.textFrames.add();		tfObj.move(undefined, [1, 0]);	// 異なるページに移動する誤作動がないようにX座標を移動		tfObj.visibleBounds = [aTop, aRight, aBottom, aLeft];		tfObj.contents = text;		return tfObj;	// 作成されたテキストオブジェクトを返す。後利用を考慮して、このようにしておく}// MacOS X+InDesign CS2の組み合わせで日本語が含まれた場合の不具合を解消する処理function convertKana(srcName, code, count){	srcName = srcName.replace(/%E3%82%BF%E3%82%99/g, "%E3%83%80"); // ダだけ特殊処理	var text = srcName.split(code); // 濁点	for (var i=0; i<text.length-1; i++){		var str = text[i];		if (str == "") continue;		var body = str.substring(0,str.length-2);		var footL = str.substring(str.length-2, str.length);		var hexL = eval("0x"+footL) + count;		hexL = hexL.toString(16).toUpperCase();		text[i] = body+hexL;	}	return text.join("");}
