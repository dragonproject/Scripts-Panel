(function(){	var dt_name = 1;	// 商品名のデータ内の位置	var dt_maker = 2;	// 商品のメーカー名のデータ内の位置	var dt_capacity = 4;	// 商品の容量のデータ内の位置	var dt_count = 5;	// 商品の入数のデータ内の位置	var dt_price = 6;	// 商品の価格のデータ内の位置	var dt_photo = 8;	// 商品名の写真のデータ内の位置	var TAB = String.fromCharCode(9);	// タブコード	if (app.documents.length < 1) {		alert("あらかじめドキュメントを開いてから実行してください");		return;	}	var fileObj = File.openDialog("タブ区切りファイルを選択してください");	if (fileObj == null) return;	// キャンセルボタンが押された時は処理しない	var flag = fileObj.open("r");	if (flag == false) {		alert("タブ区切りファイルが開けません");		return;	// ファイルが開けなかったので以後の処理を中止する	}	var folderObj = Folder.selectDialog("写真があるフォルダを選択してください");	if (folderObj == null) return;	// キャンセルボタンが押された時は処理しない	var grObj = app.activeDocument.pages[0].groups;	// 最初の1ページに割り付ける	var text = fileObj.readln();	// 最初の1行はヘッダーとして読み飛ばす。もし先頭からデータがある場合は、この行を削除。	var No = 1;		// 自動レイアウトする項目の先頭番号	while(fileObj.eof == false){	// ファイルの終わりになるまで繰り返す			text = fileObj.readln();	// 一行読み込む			var itemData = text.split(TAB);	// タブコードで区切って配列に入れる			if (itemData[0] == "○"){	// 掲載フラグがある場合だけ処理を行う				var checkFlag = checkTextFrame(grObj, "item"+No);				if (checkFlag == false) break;				try { var tfSubObj = grObj.item("item"+No).textFrames; }catch(e){}				try { var imgObj = grObj.item("item"+No).rectangles; }catch(e){}	//割り付ける画像				try {	// 写真を設定する					imgObj.item("写真").place(new File(folderObj+"/"+itemData[dt_photo]));					imgObj.item("写真").fit(FitOptions.proportionally);					imgObj.item("写真").fit(FitOptions.centerContent);				}catch(e){}				try { tfSubObj.item("商品名").contents = itemData[dt_name]; }catch(e){}				try { tfSubObj.item("メーカー").contents = itemData[dt_maker]; }catch(e){}				try { tfSubObj.item("容量").contents = itemData[dt_capacity]; }catch(e){}				try { tfSubObj.item("入数").contents = itemData[dt_count]; }catch(e){}				try {					tfSubObj.item("価格").contents = num3Format(itemData[dt_price])+"円";					if (itemData[7] == "○") {	// 特価の場合だけ「特別価格」スタイルを設定する							setTextStyle(tfSubObj.item("価格"), "特別価格");					}				}catch(e){}				No = No + 1;	// 次の番号にする			}	}})();// 文字が、数値化カンマの場合だけ文字スタイルを変更する。文字はオーバーフローしないことが大前提。// パラメータ：文字サイズを調整するテキストオブジェクト、スタイル名function setTextStyle(grObj, cStyle){	var num = "0123456789,";	// スタイルを適用する文字の一覧	var charStyle = app.activeDocument.characterStyles.item(cStyle);	for (var i=0; i<grObj.characters.length; i++){		if (num.indexOf(grObj.characters[i].contents) > -1) {	// 該当文字があればスタイルを適用			grObj.paragraphs[0].insertionPoints.itemByRange(i,i+1).applyCharacterStyle(charStyle, true);			// ↑既存のスタイルを削除してから適用。また、文字によって細かくサイズなどを調整したい場合は、この下（↓）に追加してください			// grObj.characters[i].pointSize = "40Q";	// 文字サイズを大きくしたい場合。ただし、オーバーフローしないように注意。		}	}}// 割り付けるべきテキストフレームがあるかどうか調べる。あればtrueを返しなければfalseを返すfunction checkTextFrame(grObj, tfLabel){	for (var i=0; i<grObj.length; i++){		if (grObj[i].label == tfLabel) return true;	}	return false;}// 3桁ごとにカンマを入れるfunction num3Format(num){	var str = new String(num);	var n = "";	var count = 0;	for (var i=str.length-1; i>=0; i--){		n = str.charAt(i) + n;		count++;		if (((count % 3) == 0) && (i != 0)) n = ","+n;	}	return n;}
